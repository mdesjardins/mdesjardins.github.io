<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mike Desjardins]]></title>
  <link href="http://mdesjardins.github.io/atom.xml" rel="self"/>
  <link href="http://mdesjardins.github.io/"/>
  <updated>2018-09-05T11:22:33-04:00</updated>
  <id>http://mdesjardins.github.io/</id>
  <author>
    <name><![CDATA[Mike Desjardins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Practicing what I preach]]></title>
    <link href="http://mdesjardins.github.io/blog/2018/01/25/practicing-what-i-preach/"/>
    <updated>2018-01-25T09:14:00-05:00</updated>
    <id>http://mdesjardins.github.io/blog/2018/01/25/practicing-what-i-preach</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve finally updated the old blog a bit to be more accessible. It&rsquo;s
been on my to-do list for ages. Some of this blog is VERY old. It
started out on the Blogger platform in the early 2000s, moved to
my own hosted WordPress site for the latter 2000s, and has been on
GitHub pages for the last several years using
<a href="http://www.octopress.org">Octopress</a>.</p>

<p>That means the actual content has been through several layers of
import/export processes, and the resulting text is a mess. It
still is a mess, but it&rsquo;s slightly less of one now. When I did
the last import, I noticed that a lot of the content was VERY
dated, from ages past when I was a Java and C++ developer. That
being the case, I wasn&rsquo;t terribly excited to get it all looking
right, and left many things &ldquo;good enough.&rdquo; That meant long broken
images, janky inline styles from old Wordpress plugins, and (of
course) lots of accessibility problems.</p>

<p>I think I&rsquo;ve fixed most of the accessibility issues &ndash; the pages I
checked all passed a quick a11y audit using Google&rsquo;s excellent
<a href="https://chrome.google.com/webstore/detail/accessibility-developer-t/fpkknkljclfencbdbgkenhalefipecmb?hl=en">Accessibility Developer Tools</a>, and I think I checked all of
them. Some of the things I needed to do were:</p>

<ul>
<li>The colors on my links didn&rsquo;t have enough contrast. Google&rsquo;s
audit tool doesn&rsquo;t complain about links not having underlines
(I think it should, it helps people with color blindness and other
visual impairments identify what is a link and what is normal
text), so I added those in the main text.</li>
<li>I used a really old Wordpress tool to generate my code samples,
and they all used inline stlpes for syntax highlighting. Those
inline styles didn&rsquo;t have enough contrast, either. I had to go
through the horribly mangled code samples and replace them with
the equivalent markdown to get them to pass.</li>
<li>It seems the images imported from Wordpress either didn&rsquo;t have
alt tags, or they had alt tags that were blank. Google&rsquo;s audit
tool doesn&rsquo;t identify img elements with blank alt tags, with good
reason &ndash; a blank alt tag is actually the preferred way to indicate
that there is no applicable text representation of an image. But
that&rsquo;s not the case in these instances. I think I still have many
of these I need to clean up, but didn&rsquo;t yet get a chance to hit
them all. :(</li>
<li>Fixed a bunch of busted images.</li>
<li>Added some missing roles, particularly on landmarks.</li>
</ul>


<p>There&rsquo;s still more to do &ndash; there are several instances in my
old Java/Hibernate examples where I present tabular data in
images (UGH!), that I need to convert to actual tables (why
oh why did I think this was a good idea, even ten years ago?
Live and learn). I&rsquo;ve gotta find the blank alt tags. But it&rsquo;s
a start &ndash; I can&rsquo;t decide accessibility is going to be a cause
that I&rsquo;m interested in and not practice it on my own blog.</p>

<p>Everybody resolves to do more blogging all the time, myself
included. Hopefully this gives me a reason to get back
into it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first npm project: react-a11y-select]]></title>
    <link href="http://mdesjardins.github.io/blog/2017/12/08/my-first-npm-project-react-a11y-select/"/>
    <updated>2017-12-08T08:59:00-05:00</updated>
    <id>http://mdesjardins.github.io/blog/2017/12/08/my-first-npm-project-react-a11y-select</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had a interest/passion/fascination with web accessibility (a11y) ever since I worked at my previous employer, <a href="https://www.sigient.com">Sigient</a> (note: they might be out of business now, and that site appears to be down). That particular job was a consulting company, and I ended up on the staff augmentation side of the business, which wasn&rsquo;t particularly awesome, but I&rsquo;ll save that story for another time.</p>

<p>I was working with one of the major nationwide internet service providers in the United States. They too are no longer in business, as the corporation was recently acquired. One of the things I undertook was converting some major swaths of their customer portal, an old Backbone web application, to use React. While I working on that task, the company had come under pressure to quickly make their customer portal accessible to users with disabilities. I don&rsquo;t know where this pressure was coming from &ndash; there were rumors of a lawsuit, but this was hearsay and I have no idea if there was any truth to it.</p>

<p>At that point in my career, I had very little exposure to web accessibility. In retrospect, it&rsquo;s shameful that this is the case, but I don&rsquo;t believe it&rsquo;s uncommon. I&rsquo;ve been developing websites for well over 15 years, and I had never encountered a situation where anyone made accessibility a priority. Because of that, I knew almost nothing about roles or aria attributes, <a href="http://colorsafe.co/">high contrast color palettes</a>, or the imporatance of using semantic elements and design to ensure that screen readers would be able to properly interpret pages. I&rsquo;m embarrassed to admit that my first exposure to aria attributes was probably seeing them on <a href="http://getbootstrap.com/">Bootstrap</a> documentation, and thinking to myself &ldquo;what the heck are those things?&rdquo;</p>

<p>Since my experience at Sigient, I&rsquo;ve made a conscious effort to apply accessibility to my designs whenever I&rsquo;ve been afforded the opportunity. Admittedly, my blog needs more contrast and better semantic elements. Ugh, I&rsquo;ll add it to my to-do list!</p>

<p>As I&rsquo;ve transitioned to doing a lot more front-end development, particularly in <a href="https://reactjs.org/">React</a>, it has occurred to me that we have an opportunity to reduce the difficulty in building accessible rich internet applications. Because React (and many other newer Javascript frameworks) are component-based, component creators can focus on making their individual components accessible to disabled users, while application developers can use off-the-shelf components which have been tested and meet minimum accessibility guidelines.</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/1200px-React-icon.svg.png" alt="React Logo" /></p>

<p>This obviously requires buy-in from component developers, but I&rsquo;m optimistic that component based UI architecture makes this possible and achievable.</p>

<h2>react-a11y-select</h2>

<p>To that end, I&rsquo;ve started a project on npm to build a web-accessible select component. The first rule of accessibility is to use native components whenever possible. However, over the course of my career I&rsquo;ve seen many designs requiring select/dropdown components with styled options containing graphics and other elements. With this project I&rsquo;m hoping to make doing so in an accessible way super-simple.</p>

<p>I just started this project recently, and it doesn&rsquo;t even meet all the accessibility guidelines yet. It&rsquo;s not as performant as I&rsquo;d like and some of it is pretty hacky. It&rsquo;s missing some key features that I desperately want to add. But it&rsquo;s a start and it&rsquo;s my very first npm project, and first component library. I hope to keep plugging away at it, and eventually introduce a few more components as I get better at this (I&rsquo;m thinking I might do Radio buttons next!).</p>

<p>Here&rsquo;s a link to the project on <a href="https://github.com/mdesjardins/react-a11y-select">Github</a> and on <a href="https://www.npmjs.com/package/react-a11y-select">npm</a>. There&rsquo;s a <a href="http://mikedesjardins.net/react-a11y-select/">live demo page</a> too.</p>

<p>Feel free to submit pull requests. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing RemotelyAwesomeJobs.com]]></title>
    <link href="http://mdesjardins.github.io/blog/2015/12/04/announcing-remotelyawesomejobs-dot-com/"/>
    <updated>2015-12-04T16:37:00-05:00</updated>
    <id>http://mdesjardins.github.io/blog/2015/12/04/announcing-remotelyawesomejobs-dot-com</id>
    <content type="html"><![CDATA[<p>Last October I began working on a site that crawls a bunch of different
job boards looking for remote job posts. I wanted to see if I could go
from literally nothing to a fully-functional, useful site in 30 days
on my own free time.</p>

<p>I decided on this particular project for an odd reason: lots of other
people were building nearly identical sites. You might think that&rsquo;d be
discouraging, but I decided that proved it&rsquo;d be pretty trivial to do,
and that there are definitely people out there who would find it useful.
I have no delusions about this site making me rich, so it&rsquo;s no big
deal if there are tons of competitors out there.</p>

<p>In the past I&rsquo;ve used project sites like this to learn new technology.
I hemmed and hawed for a long time about whether I wanted to use this
site as a change to learn Elixir+Phoenix and/or ReactJS. In the end I
decided that the challenge was to build something in 30 days, and my
track record with previous &ldquo;learning&rdquo; projects were that, while I&rsquo;d
learn something, they&rsquo;d almost never get finished. The extra effort
of teaching myself something new made it harder to finish. The goal
for this project was explicitly <em>not</em> to learn something new in terms
of technology, it was to see if I really could see a project through
from start to finish given the fewest impedements. It turns out I can!</p>

<p>RemotelyAwesomeJobs is thus unsurprisingly built on Rails 4.2 with
Postgres and Sidekiq in support. There&rsquo;s minimal Javascript (I
decided that might actually be a virtue in this case &ndash; I want something
that works on any device with little fuss). I did decide to host it
myself on DigitalOcean instead of going the stupid-easy Heroku
route, mostly because it&rsquo;s a lot cheaper to do so once you want
more than one server.</p>

<p>Anyhow, check it out if you&rsquo;re looking for a remote job. I&rsquo;m &ldquo;dog-
fooding&rdquo; it myself right now, so it should be pretty stable and
usable at this point. ;)</p>

<p>Link:  <a href="https://www.remotelyawesomejobs.com">https://www.remotelyawesomejobs.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conditionally Eager-load associations in Rails]]></title>
    <link href="http://mdesjardins.github.io/blog/2015/07/17/conditionally-eager-load-associations-in-rails/"/>
    <updated>2015-07-17T17:02:00-04:00</updated>
    <id>http://mdesjardins.github.io/blog/2015/07/17/conditionally-eager-load-associations-in-rails</id>
    <content type="html"><![CDATA[<p><em>(This post originally appeared on Burnside Digital&rsquo;s blog on July 12, 2013.
Alas, Burnside Digital&rsquo;s blog is no more, so I&rsquo;ve reposted it here.)</em></p>

<p>We recently had a project for a client where we wanted to eagerly load a
model’s associations, but only under certain conditions – the associated
models were rendered from a page fragment that was cached. It turns out this
is pretty easy to do.</p>

<p>The project that we needed this solution for has a basic CMS. The schema for
the CMS looks something like this:</p>

<center>
  <img src="http://mdesjardins.github.io/images/cms-schema.png" alt="Diagram of CMS Schema"/>
</center>


<p>In other words, our queries were fraught with opportunities for gobs and gobs
of dreaded “N+1 queries.” To avoid the n+1 queries, we could simply eagerly
load by invoking include:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class HomeController &lt; ApplicationController
</span><span class='line'>  def index
</span><span class='line'>    @homepage = HomePage.find(params[:id], :include =&gt; 
</span><span class='line'>      {:page_section =&gt;
</span><span class='line'>      {:page_section_schedule =&gt;
</span><span class='line'>      {:page_fragment =&gt;
</span><span class='line'>      {:carousel_slide =&gt; :image}}}})
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>However, there was caching to consider – this data rarely changes (at most,
daily), so it’s also a great candidate for fragment caching. With a fragment
cache in place, the page looks a bit like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'> &lt;head&gt;
</span><span class='line'>  &lt;title&gt;Home Page&lt;/title&gt;
</span><span class='line'> &lt;/head&gt;
</span><span class='line'> &lt;body&gt;
</span><span class='line'>  &lt;h1&gt;Home Page&lt;/h1&gt;
</span><span class='line'>  &lt;div&gt;
</span><span class='line'>    &lt;%- cache( "homepage-fragment-#{@homepage.cache_key}" ) do %&gt;
</span><span class='line'>      &lt;%= render "content", :locals =&gt; { :homepage =&gt; @homepage } %&gt;
</span><span class='line'>    &lt;%- end %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'> &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>With fragment caching, all that laborious eager loading isn’t necessary &ndash; the
associations aren’t needed because the data is already cached in a fragment.</p>

<p>To get around this, we simply perform the eager loading only when we need it, in
the cached fragment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'> &lt;head&gt;
</span><span class='line'>  &lt;title&gt;Home Page&lt;/title&gt;
</span><span class='line'> &lt;/head&gt;
</span><span class='line'> &lt;body&gt;
</span><span class='line'>  &lt;h1&gt;Home Page&lt;/h1&gt;
</span><span class='line'>  &lt;div&gt;
</span><span class='line'>    &lt;%- cache( "homepage-fragment-#{@homepage.updated_at}" ) do %&gt;
</span><span class='line'>      @homepage.do_eager_loading
</span><span class='line'>      &lt;%= render "content", :locals =&gt; { :homepage =&gt; @homepage } %&gt;
</span><span class='line'>    &lt;%- end %&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'> &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>The do_eager_loading method uses Rails’ internal eager loading methods to get
the work done. It looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class HomePage &lt; ActiveRecord::Base
</span><span class='line'>  has_many :page_section_schedules
</span><span class='line'>
</span><span class='line'>  def do_eager_loading
</span><span class='line'>    ActiveRecord::Associations::Preloader.new([self], 
</span><span class='line'>      {:page_sections =&gt; 
</span><span class='line'>      {:page_section_schedules =&gt; 
</span><span class='line'>      {:page_fragment =&gt; 
</span><span class='line'>      {:carousel_slides =&gt; :image} }}}).run
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>And voila – if the content is cached, no eager loading takes place. If the
cache isn’t populated or is invalid, we eager load.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's a (Good) REST API?]]></title>
    <link href="http://mdesjardins.github.io/blog/2015/07/17/whats-a-good-rest-api/"/>
    <updated>2015-07-17T16:40:00-04:00</updated>
    <id>http://mdesjardins.github.io/blog/2015/07/17/whats-a-good-rest-api</id>
    <content type="html"><![CDATA[<p><em>(This post originally appeared on Burnside Digital&rsquo;s blog on July 12, 2013.
Alas, Burnside Digital&rsquo;s blog is no more, so I&rsquo;ve reposted it here.)</em></p>

<p>Recently, a colleague who is a front-end developer asked me what the qualities
were for a good REST API. He had been experimenting with
<a href="http://angularjs.org">AngularJS</a> and wanted
to get a rough idea of whether or not he could expect the resource objects
returned by Angular’s $resource factory to work nicely with them.</p>

<p>Strangely, this was a question hard to pin down an answer for. I’ve worked with
RESTful APIs for years and had a good idea what made a good REST API (“I know
one when I see it”), but never really given much thought to it.
<a href="http://web.archive.org/web/20140707035207/http://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>
first defined REST in his
<a href="http://web.archive.org/web/20140707035207/http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">doctoral dissertation</a>
back in 2000, but that tome was a lot thicker than the quick bullet-points my
colleague was looking for.</p>

<p>RESTfulness is something that happens in degrees. I think I might classify it
thusly:</p>

<h3>Not RESTful, even though the API creators might claim that it’s RESTful These alone don’t make an API RESTful:</h3>

<ul>
<li>Uses HTTP or HTTPS</li>
<li>Returns XML and/or JSON</li>
</ul>


<p>Occasionally you’ll run into some misguided folks who think that the above two
points are all it takes to slap the REST seal-of-approval on their APIs.
Ironically, REST pedants will tell you that specifying the protocol or format
not only is inadequate qualification for RESTfulness, but it actually runs
afoul of the spirit of REST.</p>

<p>Warning signs that a self-proclaimed REST interface that isn’t:</p>

<ul>
<li>Verbs are in your URL (e.g., <a href="http://example.com/reservation/get">http://example.com/reservation/get</a> or <a href="http://example.com/business/search">http://example.com/business/search</a>)</li>
<li>You are using POSTDATA to send query parameters even though you aren’t changing the server’s application state.</li>
</ul>


<h3>Mostly RESTful</h3>

<p>A mostly (and I’d claim adequately) RESTful interface has these qualities:</p>

<ul>
<li>Uses URLs to refer to resources. These resources are the “nouns” in the
system. Examples of a resource might be an account, a transaction, a user,
an appointment, etc.</li>
<li>Uses the four best-known, well-recognized “HTTP Verbs”, and defines them
semantically to mean the following “CRUD” operations:</li>
<li>GET – read a resource or list of resources</li>
<li>POST – create a new resource</li>
<li>PUT – modify an existing resource</li>
<li>DELETE – delete a resource</li>
<li>You might wonder how you actually <em>do</em> something like, e.g., a payment, in a
system designed so noun-centrically like this. It seems actions/verbs have no
place in it. However, even in these cases you are creating a transaction. So
you’d POST/create a payment resource. Everything is expressed in terms of
resource lifecycle events.</li>
<li>Uses semantically appropriate error codes. E.g., 404 means the resource isn’t
found. A 401 means you aren’t authorized to view it. A 422 means something
about the data or request was malformed.</li>
</ul>


<h3>Hardcore RESTful / Hypermedia</h3>

<p>The highest degree of RESTful APIs I’ll refer to as “Hardcore RESTful.” They
have the following qualities:</p>

<ul>
<li>Doesn’t necessarily define a protocol/transport (e.g., HTTP). As I said
above, pedantic REST nerds will tell you that restricting REST to a single
protocol violates the spirit of REST. The reality is that REST almost always
implies HTTP.</li>
<li>Doesn’t define something like a version number in the URL – a version isn’t
semantically a resource or a part of the resource. Instead API versioning can be
done using something like HTTP header values (e.g., Accept:), or some other
side-band portion of the protocol.</li>
<li>Similarly, it shouldn’t define a desired data format in the URL
(e.g., <a href="http://example.com/foo.json">http://example.com/foo.json</a>), and should instead do that via some
side-band part of the protocol like HTTP headers (e.g., content Accept:). You
can embed versioning and desired format in a MIME type that is passed as an
Accept header like this: <em>application/vnd.mycompany.myapp-v1+json</em></li>
<li>To take a RESTful interface up to the next level, you can create an API that
builds upon REST and does not return hierarchical data. Instead it returns URLs
to subsets of data. This style of API is usually referred to as a “Hypermedia
API” for its reliance on hyperlinks. E.g.,</li>
</ul>


<h4>BAD</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;account&gt;
</span><span class='line'>  &lt;name&gt;Checking&lt;/name&gt;
</span><span class='line'>  &lt;balance&gt;100.00&lt;/balance&gt;
</span><span class='line'>  &lt;user&gt;
</span><span class='line'>    &lt;name&gt;Elvis Presley&lt;/name&gt;
</span><span class='line'>    &lt;address&gt;Graceland&lt;/address&gt;
</span><span class='line'>    &lt;city&gt;Memphis&lt;/city&gt;
</span><span class='line'>    &lt;state&gt;TN&lt;/state&gt;
</span><span class='line'>  &lt;/user&gt;
</span><span class='line'>&lt;/account&gt;</span></code></pre></td></tr></table></div></figure>


<h4>GOOD</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;account&gt;
</span><span class='line'>  &lt;name&gt;Checking&lt;/name&gt;
</span><span class='line'>  &lt;balance&gt;100.00&lt;/balance&gt;
</span><span class='line'>  &lt;user href="http://example.com/user/elvis-presley"/&gt;
</span><span class='line'>&lt;/account&gt;</span></code></pre></td></tr></table></div></figure>


<p>The argument for this style of design are that your inner URLs can change at a
later date, and not break the entire API. It also enables “discovery” of the
interface by allowing a client to start at a root node of the API, following
links much like a search-engine spider or bot would. This also engenders systems
to evolve their APIs independently -theoretically, a client with a generic
ability to interpret hypermedia shouldn’t get tripped up by a less rigid
definition of the API. Proponents of Hypermedia APIs often speak of a concept
called
<a href="http://web.archive.org/web/20140707035207/http://en.wikipedia.org/wiki/HATEOAS">“Hypermedia as the Engine of Application State“</a>,
or HATEOAS for short.</p>

<p>Arguments against this style is that, in practice, this manner of API
discoverability is of limited usefulness and actually incurs an overhead by
requiring more API calls than would be otherwise needed.</p>

<h3>In Summary</h3>

<p>What I told my colleague was this: most REST APIs out there meet the “mostly
RESTful” level of compliance. Given that, most REST client abstractions will
probably work OK if the API is at least at that degree of RESTfulness (with the
caveat that I didn’t wade very deeply into Angular’s resource library!). If
you’re creating a brand new REST API, it’s good to aim a little higher than
that &ndash; you’re clients will appreciate it.</p>

<p>If you want to read more about REST and Hypermedia APIs, Steve Klabnik has
written an
<a href="http://web.archive.org/web/20140707035207/http://blog.steveklabnik.com/posts/2011-07-03-nobody-understands-rest-or-http">excellent</a>
<a href="http://web.archive.org/web/20140707035207/http://blog.steveklabnik.com/posts/2011-08-07-some-people-understand-rest-and-http">series</a> of
<a href="http://web.archive.org/web/20140707035207/http://blog.steveklabnik.com/posts/2012-02-23-rest-is-over">blog</a>
<a href="http://web.archive.org/web/20140707035207/http://blog.steveklabnik.com/posts/2012-02-13-an-api-ontology">posts</a><br/>
which expand on these ideas a whole lot more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Namespace Your Redis Fragment Cache]]></title>
    <link href="http://mdesjardins.github.io/blog/2014/03/19/namespace-your-redis-fragment-cache/"/>
    <updated>2014-03-19T15:04:00-04:00</updated>
    <id>http://mdesjardins.github.io/blog/2014/03/19/namespace-your-redis-fragment-cache</id>
    <content type="html"><![CDATA[<p>For a recent work project at <a href="http://www.openbay.com/">Openbay</a>, we decided to use Resque for our
delayed job processing (might move to Sidekiq eventually, but it&rsquo;s not a priority right now). That
meant we had a Redis server already up and running in our environment. When it came time to implement
partial caching, we knew that memcache would probably have the best performance, but we already
had Redis kicking around anyway, so we figured we&rsquo;d try using Redis for it instead.</p>

<p>What we <em>forgot</em> to do was to namespace our partial cache. This meant that all of our partials were
stored in the same root namespace with everything else, including our delayed jobs.</p>

<p>We eventually noticed that queued jobs were never getting kicked off. While diagnosing the problem,
I decided I&rsquo;d try clearing the cache (for unrelated reasons). Imagine my horror:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb(main):005:0&gt; Resque.delayed_queue_peek(0,1000)
</span><span class='line'>=&gt; [1393632000, 1393635600, 1393639200, 1393696996, 1393696998, 1393697211, 1393697222, 1393699884, 1393718400, 1393783396, 1393783398, 1393783611, 1393783622, 1393786284, 1393869796, 1393869798, 1393870011, 1393870022, 1393956196, 1393956198, 1393956411, 1393956422, 1393959084, 1394042596, 1394042598, 1394042811, 1394042822, 1394045484, 1394128996, 1394128998, 1394129211, 1394129222, 1394131884, 1394330596, 1394330598, 1394330811, 1394330822, 1394333484, 1394733796, 1394733798, 1394734011, 1394734023, 1394736684, 1395050596, 1395050598, 1395050811, 1395050823, 1395053484]
</span><span class='line'>irb(main):006:0&gt; Rails.cache.clear
</span><span class='line'>=&gt; "OK"
</span><span class='line'>irb(main):007:0&gt; Resque.delayed_queue_peek(0,1000)
</span><span class='line'>=&gt; []
</span><span class='line'>irb(main):008:0&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>ZOMG.</strong> Rails.cache.clear was wiping out all of our delayed jobs!</p>

<p>The fix was simple enough &ndash; namespace your cache entries in your environment.rb file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  config.cache_store = :redis_store, ENV['REDIS_URL'], { :namespace =&gt; 'production-cache' }</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to namespace! After that, we were all better:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=&gt; [1393617439, 1393632000, 1393635600, 1393703632, 1393718400, 1393790032, 1393962832, 1394049232, 1394135632, 1394337232, 1394740432, 1395057232]
</span><span class='line'>irb(main):006:0&gt; Rails.cache.clear
</span><span class='line'>=&gt; 20
</span><span class='line'>irb(main):007:0&gt; Resque.delayed_queue_peek(0,1000)
</span><span class='line'>=&gt; [1393617439, 1393632000, 1393635600, 1393703632, 1393718400, 1393790032, 1393962832, 1394049232, 1394135632, 1394337232, 1394740432, 1395057232]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon SES, ses-verify-email-address.pl failing on OSX]]></title>
    <link href="http://mdesjardins.github.io/2011/08/23/amazon-ses-ses-verify-email-address-pl-failing-on-osx/"/>
    <updated>2011-08-23T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2011/08/23/amazon-ses-ses-verify-email-address-pl-failing-on-osx</id>
    <content type="html"><![CDATA[<p>I spent the better part of last night trying to get Amazon SES working from my Mac. After
reading the README, installing all the dependencies, and doing everything correctly, I
kept getting the following error:</p>

<pre><code>Can't locate object method "ssl_opts" via package "LWP::UserAgent" at SES.pm line 249.
</code></pre>

<p>The only Google hits were for people trying to set up SES with Ubuntu or Debian and weren&rsquo;t
much help. It finally dawned on me what was going on this morning&hellip; when I did a &ldquo;which perl&rdquo;,
I noticed that it was running from my MacPorts directory:</p>

<pre><code>~/Downloads/amazon-ses&gt; which perl
/opt/local/bin/perl
</code></pre>

<p>However, when I looked at the code in the script, the &ldquo;she-bang&rdquo; at the top of the script
was pointing to the perl in /usr/bin, which was installed with the operating system:</p>

<pre><code>#!/usr/bin/perl -w
</code></pre>

<p>So all of my dependency installations were ending up in my MacPorts version of Perl, but
the script was executing using the OSX version of Perl, and nothing worked. Changing the
first line to</p>

<pre><code>#!/opt/local/bin/perl -w
</code></pre>

<p>fixed the problem for me. It probably would make even more sense for me to make /usr/bin/perl
a symbolic link to my MacPorts installation. I hope this can help someone else out there
suffering through the same problem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Development : The Basics]]></title>
    <link href="http://mdesjardins.github.io/2011/06/28/android-development-the-basics/"/>
    <updated>2011-06-28T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2011/06/28/android-development-the-basics</id>
    <content type="html"><![CDATA[<p>I presented &#8220;Android Development: The Basics&#8221; to TechMaine&#8217;s JUG on June 21st. I&#8217;ve posted the slides from the presentation to slideshare.net &#8211; sorry you missed it? Here&#8217;s your chance to almost be there!</p>

<p><a href="http://www.slideshare.net/mdesjardins/android-development-the-basics" title="Android Development: The Basics">Android Development: The Basics</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I debugged a JRuby Stack Overflow]]></title>
    <link href="http://mdesjardins.github.io/2011/03/18/how-i-debugged-a-jruby-stack-overflow/"/>
    <updated>2011-03-18T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2011/03/18/how-i-debugged-a-jruby-stack-overflow</id>
    <content type="html"><![CDATA[<p>A little over a year ago, I inherited someone else&rsquo;s JRuby on Rails project. My initial role
on the team was the &lsquo;token Java guy,&rsquo; and knew almost zero about Ruby. I&rsquo;ve since grown to love
JRuby, but that&rsquo;s a story for another time.</p>

<p>Over the course of the project, I&rsquo;ve upgraded my JRuby version, upgraded gems, upgraded Java,
and who knows what else. One day, I went to do a migration, and they just plain didn&rsquo;t work
anymore. I discovered that most migration-related stuff didn&rsquo;t work, including tasks like
db:test:load. And by &ldquo;didn&rsquo;t work anymore,&rdquo; I mean this:</p>

<pre><code>Meep:~/_work/sonymusic/src/checkout&gt; rake db:test:load
(in /Users/mdesjardins/_work/sonymusic/src/checkout)
Invalid access of stack red zone 0x100401b20 rip=0x10a6ceb6e
Bus error
</code></pre>

<p>My initial reaction to this is what I expect most people&rsquo;s reaction would be: &ldquo;what in holy hell
is this?&rdquo; It&rsquo;s basically a blown stack &ndash; the stack has &ldquo;edges&rdquo; called red zones to which you should
never write, because it means you&rsquo;re getting too close to going off the end, and the OS is trying
to prevent you from being stupid.</p>

<p>Google was little help &ndash; <a href="http://stackoverflow.com/questions/1501770/invalid-access-of-stack-red-zone-from-java-vm" target="_blank">most people speculated</a> that similar errors were problems w/ OSX&rsquo;s JVM implementation.</p>

<p>So I flailed for a while. I tried backing up to version 1.5 of Apple&rsquo;s JVM (which itself is
<a href="http://hints.macworld.com/article.php?story=20100123192950640" target="_blank">nontrivial</a>,
and was made more complicated by the fact that json-jruby requires Java 6, but I digress). When
that failed, I tried rolling back random gems and versions of JRuby. I tried
<a href="http://stackoverflow.com/questions/2207233/how-to-enable-full-coredumps-on-os-x" target="_blank">enabling core files</a>
and reading stacks in gdb, but that ended up being useless. I tried increasing the stack to a whopping 2 Gig
(normal is 2M) by passing -J-Xss2048M, but it still crashed.</p>

<p>When I passed -J-d32 on JRuby&rsquo;s command line, I got a nice &ldquo;Stack Limit Exceeded&rdquo; error instead of the
nasty crash &ndash; so that was a start. Everything pointed to an infinite recursion problem, but where?</p>

<p>I was getting desperate. As it turns out, before I became a retread Ruby programmer, I worked in Java
enterprise stuff. This is the kind of stuff you do at banks and insurance companies, in hellish beige
cubicles, where you hang posters with diagrams of middleware and service busses and ORMs.</p>

<p>In beige cubicle hell, I learned about a few tools to monitor active JVMs (this comes in handy when
you&rsquo;re monitoring god-awful beasts like &ldquo;enterprise application servers.&rdquo;) I figured it was worth
a shot to try out <strong>jstack. </strong>jstack comes with the JVM. It shows you a stack dump of all the
threads running in a JVM. If you&rsquo;re using it on a local JVM, all you need to do is pass it the PID
of the process you&rsquo;d like to observe w/ the -l (for local?) command line switch.</p>

<p>The trick was going to be catching it just before it blew up. After a few tries, I caught this:</p>

<pre><code>"main" prio=5 tid=102801000 nid=0&amp;#215;100601000 runnable [10047d000]   java.lang.Thread.State: RUNNABLE 
at com.mysql.jdbc.util.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:123) 
at com.mysql.jdbc.util.ReadAheadInputStream.read(ReadAheadInputStream.java:188) - locked &lt;7fd39d7c8&gt; (a com.mysql.jdbc.util.ReadAheadInputStream) 
at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2329) 
at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:2774)
at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:2763)
at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3299)
at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1837)
at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:1961)
at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2537) - locked &lt;7fd3992c0&gt; (a java.lang.Object)
at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2466)
at com.mysql.jdbc.StatementImpl.executeQuery(StatementImpl.java:1383) - locked &lt;7fd3992c0&gt; (a java.lang.Object)
at com.mysql.jdbc.DatabaseMetaData$9.forEach(DatabaseMetaData.java:4815)
at com.mysql.jdbc.IterateBlock.doForAll(IterateBlock.java:50)
at com.mysql.jdbc.DatabaseMetaData.getTables(DatabaseMetaData.java:4793)
at arjdbc.jdbc.RubyJdbcConnection$16.call(RubyJdbcConnection.java:1015)
at arjdbc.jdbc.RubyJdbcConnection.withConnectionAndRetry(RubyJdbcConnection.java:1191)
at arjdbc.jdbc.RubyJdbcConnection.tables(RubyJdbcConnection.java:576)
at arjdbc.jdbc.RubyJdbcConnection.tables(RubyJdbcConnection.java:552)
at arjdbc.jdbc.RubyJdbcConnection$i$tables.call(RubyJdbcConnection$i$tables.gen:65535)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:103)
at rubyjit.tables_AA8BB5A33C226C4FACC724EF93DE8D1DF04792EB.__file__(/Users/mdesjardins/.rvm/gems/jruby-1.6.0@rails238/gems/activerecord-jdbc-adapter-1.1.1/lib/arjdbc/jdbc/adapter.rb:234)
at rubyjit.tables_AA8BB5A33C226C4FACC724EF93DE8D1DF04792EB.__file__(/Users/mdesjardins/.rvm/gems/jruby-1.6.0@rails238/gems/activerecord-jdbc-adapter-1.1.1/lib/arjdbc/jdbc/adapter.rb)
at org.jruby.ast.executable.AbstractScript.__file__(AbstractScript.java:37)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:127)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:103)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb:70)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:87)
at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:78)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:84)
at rubyjit.method_missing_with_auto_migration_CA4124448766A2D0B44A8F3F5A4A9EC9908F2D02.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb:55)
at rubyjit.method_missing_with_auto_migration_CA4124448766A2D0B44A8F3F5A4A9EC9908F2D02.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:87)
at org.jruby.internal.runtime.methods.DefaultMethod.call(DefaultMethod.java:148)
at org.jruby.internal.runtime.methods.AliasMethod.call(AliasMethod.java:101)
at org.jruby.internal.runtime.methods.AliasMethod.call(AliasMethod.java:101)
at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:78)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:84)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb:71)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:87)
at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:78)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:84)
at rubyjit.method_missing_with_auto_migration_CA4124448766A2D0B44A8F3F5A4A9EC9908F2D02.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb:55)
at rubyjit.method_missing_with_auto_migration_CA4124448766A2D0B44A8F3F5A4A9EC9908F2D02.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:87)
at org.jruby.internal.runtime.methods.DefaultMethod.call(DefaultMethod.java:148)
at org.jruby.internal.runtime.methods.AliasMethod.call(AliasMethod.java:101)
at org.jruby.internal.runtime.methods.AliasMethod.call(AliasMethod.java:101)
at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:78)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:84)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb:71)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:87)
at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:78)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:84)
at rubyjit.method_missing_with_auto_migration_CA4124448766A2D0B44A8F3F5A4A9EC9908F2D02.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb:55)
at rubyjit.method_missing_with_auto_migration_CA4124448766A2D0B44A8F3F5A4A9EC9908F2D02.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:87)
at org.jruby.internal.runtime.methods.DefaultMethod.call(DefaultMethod.java:148)
at org.jruby.internal.runtime.methods.AliasMethod.call(AliasMethod.java:101)
at org.jruby.internal.runtime.methods.AliasMethod.call(AliasMethod.java:101)
at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:78)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:84)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb:71)
at rubyjit.auto_create_table_E1FB7FE0CE1D294ABA67860B81492049B1D6AE7F.__file__(/Users/mdesjardins/_work/sonymusic/src/checkout/vendor/plugins/auto_migrations/lib/auto_migrations.rb)
at org.jruby.internal.runtime.methods.JittedMethod.call(JittedMethod.java:87)
at org.jruby.runtime.callsite.CachingCallSite.callBlock(CachingCallSite.java:78)
at org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:84)
</code></pre>

<p>etc. etc. etc. ad infinitum. This was the &ldquo;Aha!&rdquo; moment. It turned out the problem was in
my vendor/auto_migration plugin. What does this plugin do? I honestly have no idea &ndash; from
the README, it looks like it&rsquo;s a tool that applies schema deltas based on schema.rb instead
of using migrations the intended way (hmm&hellip; that seems&hellip; misguided). As I said at the
start of this post, I inherited this project. I wasn&rsquo;t even using this thing anymore.</p>

<p>I deleted the plugin, and <em>voila</em>! My stack trace woes disappeared.</p>

<p><strong>TL;DR: Use jstack if you&rsquo;re stuck w/ a blown stack on JRuby. It works like a champ.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Skicast Pro&#8230; now with widgets!]]></title>
    <link href="http://mdesjardins.github.io/2011/01/23/skicast-pro-now-with-widgets/"/>
    <updated>2011-01-23T00:00:00-05:00</updated>
    <id>http://mdesjardins.github.io/2011/01/23/skicast-pro-now-with-widgets</id>
    <content type="html"><![CDATA[<p>In a continuing effort to differentiate Skicast from the other ski condition
apps out there in Android-land, I&rsquo;ve released a new version of Skicast Pro
that features some spiffy new homescreen widgets.  These widgets allow you to
view the current conditions at your favorite resorts at-a-glance without opening
Skicast. Tapping the widget opens the main app&rsquo;s favorites screen.</p>

<center>
<img title="Skicast screen shot" src="http://mdesjardins.github.io/assets/uploads/2011/01/Screen-shot-2011-01-22-at-4.17.26-PM.png" alt="" width="192" height="288" />
</center>


<p>Skicast&rsquo;s sales have been, quite frankly, a bit disappointing. The data feed
for the app is kinda pricey, and it doesn&rsquo;t look like I&rsquo;m going to recoup that
expense.  I had assumed that there was a larger potential user base for Skicast
than my other app, Tidecast. That may still be the case, but right now Tidecast
downloads are outpacing Skicast Pro downloads almost 5-to-1.</p>

<p>So, to try to boost its flagging sales, I&rsquo;ve added the widgets. I&rsquo;ve also
introduced House Ads in the Free edition that try to upsell the Pro edition.
My AdMob ads only get about a 40% fill rate, so house ads seemed like an
obvious place to try to plug the upgrade &ndash; this is especially true for getting
the message out about the new features in the Pro version.</p>

<p>We&rsquo;ll see how it goes! I intend to slow down the pace of Android development for a
while to tackle a few other mobile platforms. I&rsquo;ve started ports of both
Skicast and Tidecast to iOS before, but I got distracted by other things and
abandoned them. I think I might revive those projects for a bit &hellip; I&rsquo;m anxious to
see how they perform in the App Store vs. the Android Market.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Skicast Android Application Released]]></title>
    <link href="http://mdesjardins.github.io/2010/10/25/skicast-1-0-released/"/>
    <updated>2010-10-25T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2010/10/25/skicast-1-0-released</id>
    <content type="html"><![CDATA[<p>Ceres Logic is proud to announce the follow-up to its first Android application,
Tidecast, with Skicast.</p>

<center>
<img title="Skicast screenshot Sunday River" src="http://mdesjardins.github.io/assets/uploads/2010/10/screenshot-sunday-river-150x150.png" alt="Skicast screenshot Sunday River" width="150" height="150" />
</center>


<p>Skicast is amobile application that allows users to get the latest information on
ski resorts in real-time. Through a partnership with
<a href="http://www.snocountry.com" target="_blank">SnoCountry.com</a>, Skicast is
able to provide the following information on ski areas in North America, Europe,
and other ski areas in the southern hemisphere:</p>

<ul>
<li>Open Alpine and Nordic trails</li>
<li>Trail conditions</li>
<li>Night Grooming</li>
<li>Trail Maps</li>
<li>Web Cam Views</li>
<li>Contact Information and Driving Directions</li>
<li>Weather Forecasts and Recent Snowfall totals</li>
</ul>


<p>Enhancements to geo-locate nearby resorts are already underway, as well as Blackberry
and iPhone versions. You can get to the Google Market page for Skicast by following
the QR Code below.</p>

<center>
<img title="qrcode" src="http://mdesjardins.github.io/assets/uploads/2010/10/qrcode-150x150.png" alt="qrcode" width="150" height="150" />
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Apache Velocity with Android]]></title>
    <link href="http://mdesjardins.github.io/2010/10/03/using-apache-velocity-with-android/"/>
    <updated>2010-10-03T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2010/10/03/using-apache-velocity-with-android</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on an Android project right now where I plan on using a WebView to
display some content, and I need to generate that content dynamically based on
the results of a web service request. I wanted an easy-to-use templating
language to build the pages with. I&rsquo;ve worked with both
<a href="http://velocity.apache.org/" target="_blank">Velocity</a>
and <a href="http://freemarker.sourceforge.net/" target="_blank">Freemarker</a>,
and either would&rsquo;ve been fine. I settled on Velocity because it was a bit easier
to set up to work with Android. Here&rsquo;s how I did it.</p>

<h1>Setup Logging</h1>

<p>First, I wanted to setup Velocity to use Android&rsquo;s built-in logging system. To do that,
I needed to create my own logging class that implemented the LogChute interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">cereslogic</span><span class="o">.</span><span class="na">velocity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.velocity.runtime.RuntimeServices</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.velocity.runtime.log.LogChute</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VelocityLogger</span> <span class="kd">implements</span> <span class="n">LogChute</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">tag</span> <span class="o">=</span> <span class="s">&quot;Velocity&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">RuntimeServices</span> <span class="n">arg0</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isLevelEnabled</span><span class="o">(</span><span class="kt">int</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">level</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">DEBUG_ID</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="kt">int</span> <span class="n">level</span><span class="o">,</span> <span class="n">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="o">(</span><span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">DEBUG_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">ERROR_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">INFO_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">TRACE_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">WARN_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="kt">int</span> <span class="n">level</span><span class="o">,</span> <span class="n">String</span> <span class="n">msg</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="o">(</span><span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">DEBUG_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">,</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">ERROR_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">,</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">INFO_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">,</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">TRACE_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">,</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">LogChute</span><span class="o">.</span><span class="na">WARN_ID</span><span class="o">:</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">tag</span><span class="o">,</span><span class="n">msg</span><span class="o">,</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can obviously adjust the <strong>isLevelEnabled</strong> method for your desired logging level.</p>

<h1>Create a ResourceLoader</h1>

<p>Next I need to feed my templates to Velocity. I could have read my templates
manually as files from the assets directory, then passed the contents of the templates
file to Velocity.evaluate as a String. But Velocity has a very configurable way to
process templates that, enables it to cache templates internally, so I decided to try that.</p>

<p>When passing Velocity the name of a template file, it delegates the template loading
to a ResourceLoader class. When you initialize Velocity, you can configure which
ResourceLoaders it should use to find and read your templates.  Later. when you call
the <strong>getTemplate</strong> method of the Velocity helper class, you pass it the name of the
template that you&rsquo;d like to load as a String.  Velocity will pass the resource name down
to its ResourceLoader(s).</p>

<p>I wanted to store my Velocity templates in the raw subdirectory of the res directory in
the Android project, so I needed to build a ResourceLoader that could do that. I
decided to extend Velocity&rsquo;s built-in FileResourceLoader as a starting point. Here&rsquo;s
what I came up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">cereslogic</span><span class="o">.</span><span class="na">velocity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.collections.ExtendedProperties</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.velocity.runtime.RuntimeServices</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.velocity.runtime.resource.Resource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.velocity.runtime.resource.loader.FileResourceLoader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.res.Resources</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AndroidResourceLoader</span> <span class="kd">extends</span> <span class="n">FileResourceLoader</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Resources</span> <span class="n">resources</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">packageName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">commonInit</span><span class="o">(</span><span class="n">RuntimeServices</span> <span class="n">rs</span><span class="o">,</span> <span class="n">ExtendedProperties</span> <span class="n">configuration</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">commonInit</span><span class="o">(</span><span class="n">rs</span><span class="o">,</span><span class="n">configuration</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">resources</span> <span class="o">=</span> <span class="o">(</span><span class="n">Resources</span><span class="o">)</span><span class="n">rs</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;android.content.res.Resources&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">packageName</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">rs</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;packageName&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getLastModified</span><span class="o">(</span><span class="n">Resource</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">InputStream</span> <span class="nf">getResourceStream</span><span class="o">(</span><span class="n">String</span> <span class="n">templateName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">resources</span><span class="o">.</span><span class="na">getIdentifier</span><span class="o">(</span><span class="n">templateName</span><span class="o">,</span> <span class="s">&quot;raw&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">packageName</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resources</span><span class="o">.</span><span class="na">openRawResource</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span>  <span class="nf">isSourceModified</span><span class="o">(</span><span class="n">Resource</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span>  <span class="nf">resourceExists</span><span class="o">(</span><span class="n">String</span> <span class="n">templateName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resources</span><span class="o">.</span><span class="na">getIdentifier</span><span class="o">(</span><span class="n">templateName</span><span class="o">,</span> <span class="s">&quot;raw&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">packageName</span><span class="o">)</span> <span class="o">!=</span> <span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because the templates are statically bundled with the .apk file, we can assume that
Velocity&rsquo;s caches don&rsquo;t need to concern themselves with modification times on the
templates, which is why <strong>getLastModified</strong> and <strong>isSourceModified</strong> don&rsquo;t really do
anything.  The <strong>getResourceStream</strong> and <strong>resourceExists</strong> methods lookup the resource
ID by name. The <strong>commonInit</strong> method is called when the ResourceManager initializes
the ResourceLoader. You&#8217;ll notice that this is where we stash the package name
for the resources as well as an instance of the Resource class.</p>

<h2>Use It</h2>

<p>So to use what we just created, we need to do some configuration before we call Velocity.init(), which will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setupVelocity</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Velocity</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">Velocity</span><span class="o">.</span><span class="na">RUNTIME_LOG_LOGSYSTEM_CLASS</span><span class="o">,</span> <span class="s">&quot;com.cereslogic.velocity.VelocityLogger&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Velocity</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;resource.loader&quot;</span><span class="o">,</span> <span class="s">&quot;android&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Velocity</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;android.resource.loader.class&quot;</span><span class="o">,</span> <span class="s">&quot;com.cereslogic.velocity.AndroidResourceLoader&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Velocity</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;android.content.res.Resources&quot;</span><span class="o">,</span><span class="n">getResources</span><span class="o">());</span>
</span><span class='line'>        <span class="n">Velocity</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&quot;packageName&quot;</span><span class="o">,</span> <span class="s">&quot;com.cereslogic.myapplication&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Velocity</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Somewhere where we want to use velocity:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>    <span class="n">WebView</span> <span class="n">engine</span> <span class="o">=</span> <span class="o">(</span><span class="n">WebView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">web_engine</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Template</span> <span class="n">template</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setupVelocity</span><span class="o">();</span>
</span><span class='line'>        <span class="n">VelocityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VelocityContext</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// add stuff to your context.</span>
</span><span class='line'>        <span class="n">template</span> <span class="o">=</span> <span class="n">Velocity</span><span class="o">.</span><span class="na">getTemplate</span><span class="o">(</span><span class="s">&quot;mytemplate&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="n">template</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>
</span><span class='line'>        <span class="n">engine</span><span class="o">.</span><span class="na">loadData</span><span class="o">(</span><span class="n">sw</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&quot;text/html&quot;</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// deal with it.</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <strong>setupVelocity</strong> method, we need to configure Velocity to use our
new ResourceLoader and Logging classes, and configure the package name for
our resources, just before calling Velocity <strong>init</strong>. Note that, if you
name your template mytemplate.vm, you&rsquo;ll only pass mytemplate to the
Velocity <strong>getTemplate</strong> method. This is because of the idiosyncratic way
that Android&rsquo;s named resource lookup stuff works.</p>

<p>Now you&rsquo;re ready to use Velocity in your Android project!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Site]]></title>
    <link href="http://mdesjardins.github.io/2009/10/26/new-site/"/>
    <updated>2009-10-26T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2009/10/26/new-site</id>
    <content type="html"><![CDATA[<p>My old, temporary Ceres Logic website is gone, and I&#8217;ve replaced it with this new WordPress-based site.  I&#8217;ve also pulled over any blog posts from my personal blog that were more technically minded.  I&#8217;ve gone with a very minimalistic look for this new site, which is very intentional.  It&#8217;s also a bit more difficult than I expected &#8211; resisting the urge to pile in tons of widgets, sidebars, and elaborate colors takes some work.  It also takes some work to make the site look like I&#8217;ve done all this on purpose, and the plain look isn&#8217;t due to a lack of incentive.</p>

<p>Anyway, hope you like the new digs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Your Programming Team Your Rock Band?]]></title>
    <link href="http://mdesjardins.github.io/2009/03/24/is-your-programming-team-your-rock-band/"/>
    <updated>2009-03-24T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2009/03/24/is-your-programming-team-your-rock-band</id>
    <content type="html"><![CDATA[<p>I&#8217;m sure that I&#8217;m not the person to make this connection, but it occurred to me the other day that being on a small
 team of coders is a lot like being in a band.  I&#8217;ve been in a couple bands that never went far beyond the garage (I&#8217;m allegedly a bass player), so perhaps I&#8217;m not the foremost authority on this topic.  However, I think there are a few parallels between building, e.g., a small MVC web application, and writing and performing the next standard verse-chorus-verse rock anthem.</p>

<center>
<img src="http://mdesjardins.github.io/assets/uploads/2009/03/tereu-tereu-ian-matthew-soper-300x200.jpg" width="300" height="200" alt="Man Playing Bass guitar"/>
</center>


<p>In particular, I think there are parallels between the specific members of a prototypical Rock band, and the members of a team who create MVC applications:</p>

<ul>
<li><strong>Drummer</strong> &#8211; The Anchor.  Provides the foundation for the music, onto which the other layers are stacked and woven.  In an MVC app, this is your database guy/gal.  The person modeling your data and managing the schematic underpinnings of your application is your drummer.  And if you&#8217;re using a weird schema-less database like CouchDB, then you have yourself a sloppy jazz drummer, which means more work for the Bassist.</li>
<li><strong>Bass Player</strong> &#8211; The Bass Player sets the groove for the song, and maps the primal beats that the drummer is hammering out into something melodic for the rest of the band to work with.  The bassist is also crucial for carrying the beat for the rest of the band when the drummer is screwing around (see note about jazz drummers, above).  In our web application, this is the domain layer, where your ORM, caching, and validation all chill out.  And like the bass player, this is rarely the sexiest or most glamorous part of the application.</li>
<li><strong>Guitarist(s) </strong>&ndash; This is your business logic developer.  Some bands choose to break this up into your traditional Angus/Malcom roles of &#8220;rhythm&#8221; and &#8220;lead&#8221; guitar.  Likewise, you may choose to have separate model and controller layers in your app (particularly if you&#8217;re a three-tier app: the web tier controller is your Angus and the middle tier model is your Malcom).  Bass players can sometimes get by as guitarists in a pinch, and vice versa.  Likewise, you&#8217;ll see business logic guys doing domain work and vice versa.  Just don&#8217;t let them try to play their parts on the wrong instrument &#8211; you&#8217;ve gotta separate your concerns, dude.  Aside from the lyrics, this is the part of the song that your listeners are the most likely to hear.</li>
<li><strong>Lead Singer</strong> &#8211; This is your AJAXy, CSS laden, poetic presentation of your band&#8217;s message.  It&#8217;s what your listeners hear (and see) first.  And the singer gets all flustered when the rest of the band screws up (the singer is a real primadonna, very sensitive). Changing your lead singer will almost certainly alieniate your fans (think Facebook redesign &#8211; the Sammy Hagar of UI decisions).</li>
</ul>


<p>I tend to get carried away with analogies, and this one is no different &#8211; I could keep going (your roadies are your project managers, your label is the marketing and executives who make all the money) but I&#8217;ll try to show some restraint.  But given this analogy, I find it interesting that the role I play on software teams is often similar to the role I play in a band.  I like bass.</p>

<p><em>Photo Credit: <a href="http://www.flickr.com/people/iansoper/">Ian Matthew Soper</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails, REST, and soapUI]]></title>
    <link href="http://mdesjardins.github.io/2009/03/18/rails-rest-and-soapui/"/>
    <updated>2009-03-18T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2009/03/18/rails-rest-and-soapui</id>
    <content type="html"><![CDATA[<p>I used to use <a href="http://soapui.org" target="_blank">soapUI</a> back when I was creating a SOAP API for a national wireless carrier.  Thankfully, I&#8217;ve been working primarily with REST APIs since then.  I noticed that soapUI had added REST support to their product, and recently I decided to try it out.</p>

<p>The REST API that I&#8217;m developing is in Rails (this is my first foray into Rails; I&#8217;m usually a Java guy with some occasional dabbling in Django and Grails), so the URLs don&#8217;t follow the traditional query-string format for passing parameters.  E.g., instead of GETting <strong><a href="http://server:port/resource?id=123**">http://server:port/resource?id=123**</a> to retrieve the resource with ID 123, it&#8217;s </strong><a href="http://server:port/resource/123**.">http://server:port/resource/123**.</a></p>

<p>For some reason (admittedly, I was being pretty dense at the time), it took me a long time to figure out how to do this in soapUI, but if you&#8217;ve stumbled into my blog by Googling for how it&#8217;s done, here&#8217;s the trick: first, set your resource URL to <strong>/resource/{id}</strong> (note that id is in curly braces).  Then, when defining your parameters, instead of leaving the STYLE parameter at its default value of QUERY, set it to TEMPLATE, being careful to name your parameter as it is named in the resource URL (in this case, id).  When soapUI generates the request, it&#8217;ll replace the {id} with the parameter&#8217;s value.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presentation on Maven]]></title>
    <link href="http://mdesjardins.github.io/2009/02/26/presentation-on-maven/"/>
    <updated>2009-02-26T00:00:00-05:00</updated>
    <id>http://mdesjardins.github.io/2009/02/26/presentation-on-maven</id>
    <content type="html"><![CDATA[<p>Last night I spoke at TechMaine&#8217;s Java Users Group about Maven.  I&#8217;ve made the slides available on Slideshare, although Slideshare botched some of the formatting a bit.  You will get the proper format if you download it and view it locally.</p>

<p><a title="Demystifying Maven" href="http://www.slideshare.net/mdesjardins/demystifying-maven?type=powerpoint">Demystifying Maven</a></p>

<p>Enjoy!  Here is the abstract for the presentation if you want to know what it&#8217;s about before diving in:</p>

<p>&#8220;Why do we need another build tool when we already have Ant? By focusing on convention over configuration, Maven allows you to declaratively define how your project is built, which reduces a lot of the procedural code that you&#8217;d need to implement in every build file if you were using Ant. This, along with Maven&#8217;s built-in management of repositories for project dependencies, allows you to streamline your build process. Ultimately Maven can reduce the amount of time that would otherwise be wasted hunting down jar files and fiddling with boilerplate build scripts.</p>

<p><span>This presentation covers Maven&#8217;s core concepts. It introduces the Plugin architecture, and explain how the most popular plugins are used. It also covers the POM concept and how it relates to dependency tracking and repositories.&#8221;</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[External Configuration with JBoss]]></title>
    <link href="http://mdesjardins.github.io/2009/01/09/external-configuration-with-jboss/"/>
    <updated>2009-01-09T00:00:00-05:00</updated>
    <id>http://mdesjardins.github.io/2009/01/09/external-configuration-with-jboss</id>
    <content type="html"><![CDATA[<p><img class="alignright size-medium wp-image-213" title="private-property" src="http://mdesjardins.github.io/assets/uploads/2009/01/private-property-300x225.jpg" alt="Private property sign" width="300" height="225" /></p>

<p>In a project I&#8217;m currently working on, I need to make some parameters configurable, and they need to be outside the .war file that I&#8217;m deploying. For example, let&#8217;s say I&#8217;m creating a service which reads data from some other RESTful service. And let&#8217;s say that the other RESTful service has two URLs, one for test and one for production. I&#8217;d like to be able to deploy my .war, and then edit a file outside of that .war file to configure which URL my service should be using.</p>

<p>My first inclination was to try to do this with a JNDI Environment Entry, so I began researching that approach. However, while the EJB spec states in 20.2.4 that the container must &#8220;provide a deployment tool that allows the Deployer to set and modify the values of the enterprise bean&#8217;s environment entries&#8221; (thanks for finding that one, <a href="http://www.jboss.com/?module=bb&amp;op=viewtopic&amp;t=58190">ipage</a>), JBoss does not seem to have such a facility.</p>

<p>Soon I started to wonder if JNDI wasn&#8217;t a bit overkill for what I needed to do, anyway.  I didn&#8217;t want to specify my parameters on the command-line; I wanted to simplify deployment and wanted to be able to change these values at runtime without restarting the server. But perhaps a System Property was all I needed.</p>

<p>As it turns out, JBoss has the <a href="http://docs.jboss.org/jbossas/jboss4guide/r3/html/ch10.html">System Properties Management Service</a> for such things.  Here&#8217;s what you need to do:</p>

<ol>
<li>Make sure properties-plugin.jar is in your ${JBOSS_HOME}/server/<server>/lib directory.</li>
<li>Make sure the properties-service.xml is in your deploy directory (you can find a copy in the &#8220;default&#8221; server directory)</li>
<li>You now have two options, either edit the URLList to have a comma-separated list of locations of properties files, or you can specify your properties directly in properties-service.xml in the <attribute name=&#8221;Properties&#8221;> element.</li>
</ol>


<p>Now, to access your property, all you need to do is call the venerable System.getProperty() method.</p>

<p><em>Photo Credit: <a href="http://flickr.com/people/shelleygibb/">Shelley Gibb</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test your EJBs with JMeter]]></title>
    <link href="http://mdesjardins.github.io/2008/12/22/test-your-ejbs-with-jmeter/"/>
    <updated>2008-12-22T00:00:00-05:00</updated>
    <id>http://mdesjardins.github.io/2008/12/22/test-your-ejbs-with-jmeter</id>
    <content type="html"><![CDATA[<center>
<img src="http://mdesjardins.github.io/assets/uploads/2008/12/jaguar-tachometer-150x150.jpg" width="150" height="150" alt="Tachometer" />
</center>


<p>Sometimes it&#8217;s helpful to do some performance benchmarks on your EJBs. There are a few different ways to do this, but I&#8217;ve found that Apache&#8217;s <a href="http://jakarta.apache.org/jmeter">JMeter</a> is an excellent tool for benchmarking. Unfortunately, JMeter doesn&#8217;t come with a general-purpose sampler for testing arbitrary EJBs. Luckily, it isn&#8217;t very difficult to create one.</p>

<p>For this article, I&#8217;m using the JBoss application server to host my EJBs. The process for using other containers should be quite similar.</p>

<h3>1.) Create a factory to lookup your EJBs.</h3>

<p>The first thing that you&#8217;ll probably want to do is create a simple singleton factory class to create instances of your EJB client for your test. I use something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyServiceFactory</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Log</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">MyServiceFactory</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">MyService</span> <span class="n">service</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">MyServiceFactory</span> <span class="n">me</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">MyServiceFactory</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MyServiceFactory</span><span class="o">.</span><span class="na">me</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyServiceFactory</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">MyServiceFactory</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">MyServiceFactory</span><span class="o">.</span><span class="na">me</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">MyService</span> <span class="nf">getService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">MyService</span><span class="o">.</span><span class="na">service</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Get the remote interface of the music search service</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Loading the service...&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// JNDI the old-fashioned way:</span>
</span><span class='line'>        <span class="n">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InitialContext</span><span class="o">();</span>
</span><span class='line'>        <span class="n">service</span> <span class="o">=</span> <span class="o">(</span><span class="n">MyService</span><span class="o">)</span><span class="n">ctx</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span><span class="s">&quot;MyAction/remote&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">service</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Didn&#39;t get the service!&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NamingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error looking up the remote service&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">service</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.) Write the test</h3>

<p>Next, we&#8217;ll need to write the test itself. To do this, we&#8217;ll extend the AbstractJavaSamplerClient class in JMeter&#8217;s org.apache.jmeter.protocol.java.sampler package. This abstract class has a runTest method that we will override, and this method implements the actual test. We will also override the getDefaultParameters method to provide some reasonable defaults values which will be displayed in JMeter&#8217;s GUI application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">us</span><span class="o">.</span><span class="na">mikedesjardins</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">jmeter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.jmeter.config.Arguments</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.jmeter.protocol.java.sampler.JavaSamplerContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.jmeter.samplers.SampleResult</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DigitalContentServiceEJBTestSampler</span> <span class="kd">extends</span> <span class="n">AbstractJavaSamplerClient</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">SampleResult</span> <span class="nf">runTest</span><span class="o">(</span><span class="n">JavaSamplerContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">SampleResult</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SampleResult</span><span class="o">();</span>
</span><span class='line'>    <span class="n">MyService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">MyServiceFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getService</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">results</span><span class="o">.</span><span class="na">sampleStart</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Long</span> <span class="n">param1</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getLongParameter</span><span class="o">(</span><span class="s">&quot;PARAM_1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">param2</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getStringParameter</span><span class="o">(</span><span class="s">&quot;PARAM_2&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MyResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">myMethod</span><span class="o">(</span><span class="n">param1</span><span class="o">,</span> <span class="n">param2</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">results</span><span class="o">.</span><span class="na">setSuccessful</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>       <span class="n">results</span><span class="o">.</span><span class="na">setResponseCodeOK</span><span class="o">();</span>
</span><span class='line'>       <span class="n">results</span><span class="o">.</span><span class="na">setResponseMessage</span><span class="o">(</span><span class="s">&quot;&#39;myResult:&quot;</span> <span class="o">+</span> <span class="n">myResult</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">results</span><span class="o">.</span><span class="na">setSuccessful</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">results</span><span class="o">.</span><span class="na">sampleEnd</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">results</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Arguments</span> <span class="nf">getDefaultParameters</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Arguments</span> <span class="n">args</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Arguments</span><span class="o">();</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="na">addArgument</span><span class="o">(</span><span class="s">&quot;PARAM_1&quot;</span><span class="o">,</span> <span class="s">&quot;4815162342&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="na">addArgument</span><span class="o">(</span><span class="s">&quot;PARAM_2&quot;</span><span class="o">,</span> <span class="s">&quot;Iculus&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">args</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.) Setup JMeter</h3>

<p>JMeter&#8217;s extra libs directory is ${JMETER_INSTALL_LIB}/lib/ext. Into that directory you will need to copy any jars that your EJB client will need. In you&#8217;re using JBoss, you will want to copy the jbossall-client.jar into that directory as well (for the JNDI client and other remoting goodies) &#8211; presumably other application servers have similar client jar files available.</p>

<p>When you fire up JMeter, your new sampler should appear in the Samplers menu. Enjoy!</p>

<p><em>Photo Credit: <a href="http://flickr.com/people/billjacobus1/">Bill Jacobus</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don&#8217;t Ignore serialVersionUID]]></title>
    <link href="http://mdesjardins.github.io/2008/12/11/dont-ignore-serialversionuid/"/>
    <updated>2008-12-11T00:00:00-05:00</updated>
    <id>http://mdesjardins.github.io/2008/12/11/dont-ignore-serialversionuid</id>
    <content type="html"><![CDATA[<p>Okay,I admit that this one should have totally been obvious to me long ago. But I&#8217;m still a bit of a JEE newcomer (been doing it for almost five years), so perhaps I can be forgiven.</p>

<p>If you do a lot of ORM or EJB remoting, you probably deal with a lot of Serializable classes. And you&#8217;re probably used to the annoying warning message that you see all the time in your IDE when you&#8217;re working with Serializable classes:</p>

<p>The serializable class BlaBlaBla does not declare a static final serialVersionUID field of type long BlaBlaBla.java myProject/src/main/java/us/mikedesjardins/foo/domain/entity line 44</p>

<p>If you&#8217;re like me, you roll your eyes and politely add a @SuppressWarnings(&#8220;serial&#8221;) to the top of the class definition (or, worse, you just shut the warning message off in your IDE altogether. Even I don&#8217;t do that!). You reason with yourself that current versions of Java conveniently and automatically compute the serialVersionUID at run-time, so there&#8217;s no need to bother with the formality of a version number on your class &#8211; it&#8217;s just a nuisance holdover from days of Java yore.</p>

<p><span style="font-weight: bold;">IT&#8217;S A TRAP!</span><br/>
Now that I&#8217;ve found myself well into a new project with this lazy philosophy, I&#8217;m starting to run into problems. I have a client of my EJB that uses one of these Serializable objects, and I&#8217;m finding that when I make the most trivial changes to my shared classes, I need to compile both the server and the client components. The two components that were supposed to be loosely coupled are now hopelessly intertwined. So I did some further research on how the JVM computes the ad-hoc serialVersionUID at runtime when it isn&#8217;t provided.</p>

<p><a href="http://www.javaworld.com/javaworld/jw-02-2006/jw-0227-control.html?page=1">This article over at JavaWorld does a far better and more thorough job of explaining it than I will</a>. In a nutshell, backward-compatability with respect to serialization and de-serialization is a lot less fragile than the cases that the serialVersionUID generation is protecting you against. That version generation algorithm computes an SHA hash based on the class name, sorted member variables, modifiers, and interfaces.</p>

<p>In reality, serialization and de-serialization generally only breaks when one of the following things happens to your class (from the aforementioned article at JavaWorld):
*   Delete fields
*   Change class hierarchy
*   Change non-static to static
*   Change non-transient to transient
*   Change type of a primitive field</p>

<p><span style="font-weight: bold;">Ensure Minimal Coupling Between Components</span><br/>
To ensure that your components which use Serialization have minimal runtime dependencies on each other, you have two options:
*   Declare a specific serialVersionUID, and update it whenever you make a change that breaks backward compatability.
*   Don&#8217;t rely on any classes for use as transfer objects which will potentially change. This one is pretty obvious, but sometimes you will be surprised down the road at which classes are modified more often than others.
*   Don&#8217;t use your own objects at all when transferring data. Instead, rely on classes like Integers, Strings, or HashMaps to shuttle data around among components. (Obviously, protocols like SOAP and REST rely on XML documents for this to ensure maximum de-coupling, but you&#8217;re presumably using something like EJB remoting to avoid the complexity or overhead of these protocols).</p>

<p><span style="font-style: italic;">Photo Credit: </span><a style="font-style: italic;" href="http://flickr.com/people/thebusybrain/">Mike Johnson</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure Spring to automatically re-connect to your EJBs]]></title>
    <link href="http://mdesjardins.github.io/2008/10/24/configure-spring-to-automatically-re/"/>
    <updated>2008-10-24T00:00:00-04:00</updated>
    <id>http://mdesjardins.github.io/2008/10/24/configure-spring-to-automatically-re</id>
    <content type="html"><![CDATA[<p>If you have a service that is a client of a remote EJB, you may have run into the situation where the EJB server shuts down and restarts. When this happens your EJB client may need to be restarted as well, in order to re-discover and reconnect to the EJBs; otherwise you&#8217;ll end up with connection exceptions in the client.</p>

<p>If you&#8217;re using Spring to autowire your EJB clients, it&#8217;s quite easy to configure the service so that the home interface will refresh on connection failures. Note that if you&#8217;re using EJB3, you will need to upgrade to at least version 2.5.5 of Spring. There is a <a href="http://jira.springframework.org/browse/SPR-4801">bug</a> in earlier versions of Spring which prevented this technique from working with EJB3.</p>

<p>In your spring file, make sure you configure your slsb references to have cache-home disabled, and refresh-home-0n-connect-failure thusly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;jee:remote-slsb</span> <span class="na">id=</span><span class="s">&quot;myService&quot;</span> <span class="na">jndi-name=</span><span class="s">&quot;MyService/remote&quot;</span>
</span><span class='line'>        <span class="na">business-interface=</span><span class="s">&quot;us.mikedesjardins.services.MyService&quot;</span>
</span><span class='line'>        <span class="na">cache-home=</span><span class="s">&quot;false&quot;</span> <span class="na">lookup-home-on-startup=</span><span class="s">&quot;false&quot;</span>
</span><span class='line'>        <span class="na">home-interface=</span><span class="s">&quot;us.mikedesjardins.services.MyService&quot;</span>
</span><span class='line'>        <span class="na">resource-ref=</span><span class="s">&quot;false&quot;</span> <span class="na">refresh-home-on-connect-failure=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;jee:environment&gt;</span>
</span><span class='line'>           <span class="c">&lt;!-- Include any relevant environment settings here --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/jee:environment&gt;</span>
</span><span class='line'><span class="nt">&lt;/jee:remote-slsb&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, you should be able to restart your EJB hosts without needing to restart your EJB clients!</p>
]]></content>
  </entry>
  
</feed>
